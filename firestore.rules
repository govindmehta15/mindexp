/**
 * @fileoverview Firestore Security Rules for the WellTrack Community platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and explicit ownership.
 * It uses a combination of authentication checks and data validation to control read and write access to Firestore documents.
 * The prototyping philosophy is permissive on data shapes to allow for fast iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information, accessible only to the owner.
 * - /study_participants: Stores applications to join study programs.  No write Access at this time.
 * - /student_community_applications: Stores applications from students to join the community.  No write Access at this time.
 * - /professional_applications: Stores applications from professionals to join the community. No write Access at this time.
 * - /circle_applications: Stores applications to join specific circles.  No write Access at this time.
 * - /mentor_applications: Stores applications from users wanting to become mentors.  No write Access at this time.
 * - /subscriptions: Stores email addresses for newsletter subscriptions. Public reads, but ONLY backend writes are permitted.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the authenticated user.
 * - Listing of users is disallowed.
 * - All write operations require authentication.
 * - Data validation is minimized to focus on authorization and relational integrity.
 * - No write Access to Application data at this time.
 *
 * Denormalization for Authorization:
 * The rules do not currently denormalize data. If more complex authorization schemes are needed in the future (e.g., role-based access to projects),
 * consider denormalizing relevant data onto the documents to avoid costly `get()` calls in the rules.  For example, store Circle Members inside the Circle document to do authorization checks based on circle-membership.
 *
 * Structural Segregation:
 * The application uses separate collections for different data types (e.g., applications, user profiles), which simplifies the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for user accounts.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own account with matching userId.
     * @allow (get, update, delete) Signed-in user accesses their own account.
     * @deny (create) Signed-in user tries to create an account for another user.
     * @deny (get, update, delete) Signed-in user tries to access another user's account.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability of UserID
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for study participant applications.
     * @path /study_participants
     * @allow (create) Authenticated user submits a study participant application with a matching userId.
     * @deny (get, list, update, delete) No read or write access to the application collection.  All interaction will occur via backend.
     * @principle Only backend processes can modify applications after submission.
     */
    match /study_participants {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for student community applications.
     * @path /student_community_applications
     * @allow (create) Authenticated user submits a student community application with a matching userId.
     * @deny (get, list, update, delete) No read or write access to the application collection.  All interaction will occur via backend.
     * @principle Only backend processes can modify applications after submission.
     */
    match /student_community_applications {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for professional applications.
     * @path /professional_applications
     * @allow (create) Authenticated user submits a professional application with a matching userId.
     * @deny (get, list, update, delete) No read or write access to the application collection.  All interaction will occur via backend.
     * @principle Only backend processes can modify applications after submission.
     */
    match /professional_applications {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for circle applications.
     * @path /circle_applications
     * @allow (create) Authenticated user submits a circle application with a matching userId.
     * @deny (get, list, update, delete) No read or write access to the application collection.  All interaction will occur via backend.
     * @principle Only backend processes can modify applications after submission.
     */
    match /circle_applications {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for mentor applications.
     * @path /mentor_applications
     * @allow (create) Authenticated user submits a mentor application with a matching userId.
     * @deny (get, list, update, delete) No read or write access to the application collection.  All interaction will occur via backend.
     * @principle Only backend processes can modify applications after submission.
     */
    match /mentor_applications {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

      /**
       * @description Rules for email subscriptions.
       * @path /subscriptions
       * @allow (get, list) Public access for reading.
       * @allow (create) No user creation allowed.  Must happen on the backend.
       * @allow (update, delete) Only backend processes can modify.
       * @principle Only backend processes can modify subscriptions.
       */
    match /subscriptions {
      allow get: if true;
      allow list: if true;
      allow create: if false; // Prevents client-side subscription creation.
      allow update: if false;
      allow delete: if false;
    }
  }
}