/**
 * @fileoverview Firestore Security Rules for WellTrack Community.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated data,
 * while allowing public read access to certain collections. Applications
 * require explicit approval workflows, implemented through status fields.
 *
 * Data Structure:
 * - User accounts are stored in /users/{userId}.
 * - Applications (study, community, professional, circle, mentor) are stored
 *   in top-level collections (e.g., /study_participants).
 * - Assessment sessions and reports (ASM1, ASM2) are stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Public read access is granted to application and subscription collections.
 * - All write operations are secured using authentication and authorization checks.
 *
 * Denormalization for Authorization:
 * - ASM session documents store the userId to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own document.
     * @deny (create) User with ID 'user123' cannot create a document for 'user456'.
     * @principle Enforces user ownership for data privacy.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read study participant applications, but restricts creation, updates, and deletions.
     * @path /study_participants
     * @allow (get, list) Any user can read the applications.
     * @deny (create) Any user cannot create an application without validation.
     * @principle Allows public read access but restricts write access.
     */
    match /study_participants/{applicationId} {
      allow get, list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // TODO: Add admin/moderator role check for application updates/deletions
    }

    /**
     * @description Allows anyone to read student community applications, but restricts creation, updates, and deletions.
     * @path /student_community_applications
     * @allow (get, list) Any user can read the applications.
     * @deny (create) Any user cannot create an application without validation.
     * @principle Allows public read access but restricts write access.
     */
    match /student_community_applications/{applicationId} {
      allow get, list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // TODO: Add admin/moderator role check for application updates/deletions
    }

    /**
     * @description Allows anyone to read professional applications, but restricts creation, updates, and deletions.
     * @path /professional_applications
     * @allow (get, list) Any user can read the applications.
     * @deny (create) Any user cannot create an application without validation.
     * @principle Allows public read access but restricts write access.
     */
    match /professional_applications/{applicationId} {
      allow get, list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // TODO: Add admin/moderator role check for application updates/deletions
    }

    /**
     * @description Allows anyone to read circle applications, but restricts creation, updates, and deletions.
     * @path /circle_applications
     * @allow (get, list) Any user can read the applications.
     * @deny (create) Any user cannot create an application without validation.
     * @principle Allows public read access but restricts write access.
     */
    match /circle_applications/{applicationId} {
      allow get, list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // TODO: Add admin/moderator role check for application updates/deletions
    }

    /**
     * @description Allows anyone to read mentor applications, but restricts creation, updates, and deletions.
     * @path /mentor_applications
     * @allow (get, list) Any user can read the applications.
     * @deny (create) Any user cannot create an application without validation.
     * @principle Allows public read access but restricts write access.
     */
    match /mentor_applications/{applicationId} {
      allow get, list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // TODO: Add admin/moderator role check for application updates/deletions
    }

    /**
     * @description Allows anyone to read email subscriptions, but restricts creation, updates, and deletions.
     * @path /subscriptions
     * @allow (get, list) Any user can read the subscriptions.
     * @deny (create) Any user cannot create a subscription without validation.
     * @principle Allows public read access but restricts write access.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create: if true;
      allow update, delete: if false; // TODO: Implement admin role for subscription management.
    }

    /**
     * @description Manages access to ASM1 session data.
     * @path /asm1_sessions/{sessionId}
     * @allow (create) User can create their own session.
     * @deny (create) User cannot create a session for another user.
     */
    match /asm1_sessions/{sessionId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if false; // TODO: Validate existing owner before update.
      allow delete: if false; // TODO: Validate existing owner before delete.
    }

    /**
     * @description Manages access to ASM1 report data.
     * @path /asm1_reports/{reportId}
     */
    match /asm1_reports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if false; // TODO: Validate existing owner before update.
      allow delete: if false; // TODO: Validate existing owner before delete.
    }

    /**
     * @description Manages access to ASM2 session data.
     * @path /asm2_sessions/{sessionId}
     * @allow (create) User can create their own session.
     * @deny (create) User cannot create a session for another user.
     */
    match /asm2_sessions/{sessionId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if false; // TODO: Validate existing owner before update.
      allow delete: if false; // TODO: Validate existing owner before delete.
    }

    /**
     * @description Manages access to ASM2 report data.
     * @path /asm2_reports/{reportId}
     */
    match /asm2_reports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if false; // TODO: Validate existing owner before update.
      allow delete: if false; // TODO: Validate existing owner before delete.
    }
  }
}