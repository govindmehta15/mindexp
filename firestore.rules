/**
 * @file Firestore Security Rules for WellTrack Community.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only access their own data. All writes are authenticated and validated against the user's identity.
 *
 * Data Structure:
 * User accounts are stored in `/users/{userId}`. User profiles are stored in `/users/{userId}/profile`. This hierarchical structure enables simple path-based authorization.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No listing of user documents is allowed to prevent information disclosure.
 * - Authentication is required for all write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces path-based ownership for user accounts. Only the user with the matching ID can read or write their account data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their account.
     *    - auth.uid: 'user123'
     *    - request.resource.data.id: 'user123'
     * @allow (get) - User with ID 'user123' reads their account.
     *    - auth.uid: 'user123'
     * @allow (update) - User with ID 'user123' updates their account.
     *    - auth.uid: 'user123'
     * @allow (delete) - User with ID 'user123' deletes their account.
     *    - auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create an account for 'user123'.
     *    - auth.uid: 'user456'
     *    - request.resource.data.id: 'user123'
     * @deny (get) - User with ID 'user456' attempts to read the account for 'user123'.
     *    - auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces path-based ownership for user profiles, which are subcollections of user accounts.
     * @path /users/{userId}/profile
     * @allow (create) - User with ID 'user123' creates their profile.
     *    - auth.uid: 'user123'
     * @allow (get) - User with ID 'user123' reads their profile.
     *    - auth.uid: 'user123'
     * @allow (update) - User with ID 'user123' updates their profile.
     *    - auth.uid: 'user123'
     * @allow (delete) - User with ID 'user123' deletes their profile.
     *    - auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a profile for 'user123'.
     *    - auth.uid: 'user456'
     * @deny (get) - User with ID 'user456' attempts to read the profile for 'user123'.
     *    - auth.uid: 'user456'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/profile {

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}