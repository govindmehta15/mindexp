/**
 * @fileoverview Firestore Security Rules for WellTrack Community.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user accounts
 * and allows open access for email subscriptions. All application data
 * (study, student, professional, circle, and mentor applications) can be created by anyone,
 * but cannot be listed, updated, or deleted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information.  Each user can only
 *   access their own document.
 * - /study_participants: Stores applications to join study programs.
 * - /student_community_applications: Stores applications from students.
 * - /professional_applications: Stores applications from professionals.
 * - /circle_applications: Stores applications to join circles.
 * - /mentor_applications: Stores applications from users wanting to become mentors.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user account data.
 * - Listing of users is disallowed.
 * - Applications (study, student, professional, circle, mentor) are publicly creatable, but not readable, updatable, or deletable by end-users.
 * - Email subscriptions are publicly accessible for creation.
 *
 * Denormalization for Authorization:
 * N/A - User account ownership is based on the user ID in the path.
 * Application ownership is implicitly public-creation only.
 *
 * Structural Segregation:
 * N/A - No separation of public/private data within a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account documents.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user123' cannot read another user's profile ('user456').
     * @deny (create) User with ID 'user123' cannot create a profile with ID 'user456'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to create a study participant application, but no one can read, update, or delete.
     * @path /study_participants
     * @allow (create) Any authenticated user can submit a study participant application.
     * @deny (get) No one can read study participant applications.
     * @deny (update) No one can update study participant applications.
     * @deny (delete) No one can delete study participant applications.
     * @principle Allows public creation with no read or modification access.
     */
    match /study_participants/{document} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to create a student community application, but no one can read, update, or delete.
     * @path /student_community_applications
     * @allow (create) Any authenticated user can submit a student community application.
     * @deny (get) No one can read student community applications.
     * @deny (update) No one can update student community applications.
     * @deny (delete) No one can delete student community applications.
     * @principle Allows public creation with no read or modification access.
     */
    match /student_community_applications/{document} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to create a professional application, but no one can read, update, or delete.
     * @path /professional_applications
     * @allow (create) Any authenticated user can submit a professional application.
     * @deny (get) No one can read professional applications.
     * @deny (update) No one can update professional applications.
     * @deny (delete) No one can delete professional applications.
     * @principle Allows public creation with no read or modification access.
     */
    match /professional_applications/{document} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Allows anyone to create a circle application, but no one can read, update, or delete.
     * @path /circle_applications
     * @allow (create) Any authenticated user can submit a circle application.
     * @deny (get) No one can read circle applications.
     * @deny (update) No one can update circle applications.
     * @deny (delete) No one can delete circle applications.
     * @principle Allows public creation with no read or modification access.
     */
    match /circle_applications/{document} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to create a mentor application, but no one can read, update, or delete.
     * @path /mentor_applications
     * @allow (create) Any authenticated user can submit a mentor application.
     * @deny (get) No one can read mentor applications.
     * @deny (update) No one can update mentor applications.
     * @deny (delete) No one can delete mentor applications.
     * @principle Allows public creation with no read or modification access.
     */
    match /mentor_applications/{document} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to create subscribe emails, but no one can read, update, or delete.
     * @path /subscribe_emails
     * @allow (create) Any user can create subscribe emails.
     * @deny (get) No one can read subscribe emails.
     * @deny (update) No one can update subscribe emails.
     * @deny (delete) No one can delete subscribe emails.
     * @principle Allows public creation with no read or modification access.
     */
    match /subscribe_emails/{document} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}