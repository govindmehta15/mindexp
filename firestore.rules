/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user accounts and allows users to submit various applications which are publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information, accessible only to the owner.
 * - /{application_collection}: Stores various applications (student, professional, mentor, etc.). Any authenticated user can create an application.
 *
 * Key Security Decisions:
 * - User accounts are strictly private; only the owner can read or write.
 * - Application collections are publicly readable and writable by any authenticated user. The application documents have a `userId` field that must match the authenticated user's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user account information, accessible only to the owner.
     * @path /users/{userId}
     * @allow (read, write) if the authenticated user's ID matches the userId.
     * @deny (read, write) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create a student community application.
     * @path /student_community_applications
     * @allow (create) if the authenticated user's ID matches the userId in the request data.
     * @allow (get, list) if true (public read).
     * @deny (update, delete) always.
     * @principle Allows public read and owner-only create.
     */
    match /student_community_applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Allows any authenticated user to create a study participant application.
     * @path /study_participants
     * @allow (create) if the authenticated user's ID matches the userId in the request data.
     * @allow (get, list) if true (public read).
     * @deny (update, delete) always.
     * @principle Allows public read and owner-only create.
     */
    match /study_participants/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to create a professional application.
     * @path /professional_applications
     * @allow (create) if the authenticated user's ID matches the userId in the request data.
     * @allow (get, list) if true (public read).
     * @deny (update, delete) always.
     * @principle Allows public read and owner-only create.
     */
    match /professional_applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to create a circle application.
     * @path /circle_applications
     * @allow (create) if the authenticated user's ID matches the userId in the request data.
     * @allow (get, list) if true (public read).
     * @deny (update, delete) always.
     * @principle Allows public read and owner-only create.
     */
    match /circle_applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to create a mentor application.
     * @path /mentor_applications
     * @allow (create) if the authenticated user's ID matches the userId in the request data.
     * @allow (get, list) if true (public read).
     * @deny (update, delete) always.
     * @principle Allows public read and owner-only create.
     */
    match /mentor_applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}