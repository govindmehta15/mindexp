/**
 * @fileoverview Firestore Security Rules for WellTrack Community.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection and access control.
 * Users can only manage their own data unless explicitly granted admin privileges.
 *
 * Data Structure:
 * - /users/{userId}: User account information.
 * - /study_participants: Applications to participate in studies.
 * - /student_community_applications: Applications for student community.
 * - /professional_applications: Applications for professional roles.
 * - /circle_applications: Applications to join circles.
 * - /mentor_applications: Applications to become mentors.
 * - /subscriptions: Newsletter subscription emails.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization.
 * - All write operations are protected with authorization checks.
 *
 * Denormalization for Authorization:
 * - Many entities contain a `userId` field, which MUST match the authenticated user's UID for write access. This avoids costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user account data.
     * @path /users/{userId}
     * @allow (create) User can create their own account if the userId matches their auth.uid.
     * @allow (update, delete) User can update/delete their own account if the userId matches their auth.uid.
     * @deny (create, update, delete) if the userId does not match the auth.uid.
     * @deny (list) Prevents listing all user accounts.
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to study participant applications.
     * @path /study_participants
     * @allow (create) User can create an application if the userId matches their auth.uid.
     * @allow (update, delete) User can update/delete their own application if the userId matches their auth.uid and document exists.
     * @deny (create, update, delete) if the userId does not match the auth.uid or document does not exist.
     * @allow (list, get) Everyone can list and get.
     * @principle Enforces user ownership for writes and open access for reads.
     */
    match /study_participants/{document} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages access to student community applications.
     * @path /student_community_applications
     * @allow (create) User can create an application if the userId matches their auth.uid.
     * @allow (update, delete) User can update/delete their own application if the userId matches their auth.uid and document exists.
     * @deny (create, update, delete) if the userId does not match the auth.uid or document does not exist.
     * @allow (list, get) Everyone can list and get.
     * @principle Enforces user ownership for writes and open access for reads.
     */
    match /student_community_applications/{document} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to professional applications.
     * @path /professional_applications
     * @allow (create) User can create an application if the userId matches their auth.uid.
     * @allow (update, delete) User can update/delete their own application if the userId matches their auth.uid and document exists.
     * @deny (create, update, delete) if the userId does not match the auth.uid or document does not exist.
     * @allow (list, get) Everyone can list and get.
     * @principle Enforces user ownership for writes and open access for reads.
     */
    match /professional_applications/{document} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages access to circle applications.
     * @path /circle_applications
     * @allow (create) User can create an application if the userId matches their auth.uid.
     * @allow (update, delete) User can update/delete their own application if the userId matches their auth.uid and document exists.
     * @deny (create, update, delete) if the userId does not match the auth.uid or document does not exist.
     * @allow (list, get) Everyone can list and get.
     * @principle Enforces user ownership for writes and open access for reads.
     */
    match /circle_applications/{document} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to mentor applications.
     * @path /mentor_applications
     * @allow (create) User can create an application if the userId matches their auth.uid.
     * @allow (update, delete) User can update/delete their own application if the userId matches their auth.uid and document exists.
     * @deny (create, update, delete) if the userId does not match the auth.uid or document does not exist.
     * @allow (list, get) Everyone can list and get.
     * @principle Enforces user ownership for writes and open access for reads.
     */
    match /mentor_applications/{document} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages access to email subscriptions.
     * @path /subscriptions
     * @allow (create) Anyone can create a subscription.
     * @deny (update, delete) No one can update or delete a subscription.
     * @allow (list, get) Everyone can list and get.
     */
    match /subscriptions/{document} {
      allow get, list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}